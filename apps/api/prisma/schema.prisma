generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ####### ENUMS #######
enum ETokenType {
  PASSWORD_RECOVER
}

enum EAccountProvider {
  GITHUB
}

enum ERole {
  ADMIN
  MEMBER
  BILLING
}

// ####### MODEL USER #######
model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_has")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens             Token[]
  accounts           Account[]
  invites            Invite[]
  member_on          Member[]
  owns_organizations Organization[]
  owns_projects      Project[]

  @@map("users")
}

// ####### MODEL TOKER #######
model Token {
  id        String     @id @default(uuid())
  type      ETokenType
  createdAt DateTime   @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

// ####### MODEL ACCOUNT #######
model Account {
  id                String           @id @default(uuid())
  provider          EAccountProvider
  providerAccountAd String           @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

// ####### MODEL INVITE #######
model Invite {
  id        String   @id @default(uuid())
  role      ERole
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  author    User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

// ####### MODEL MEMBER #######
model Member {
  id   String @id @default(uuid())
  role ERole  @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

// ####### MODEL ORGANIZATION #######
model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUsersByDomain Boolean  @default(false) @map("should_attach_users_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites  Invite[]
  members  Member[]
  projects Project[]

  @@map("organizations")
}

// ####### MODEL PROJECT #######
model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@map("projects")
}
